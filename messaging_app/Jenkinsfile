pipeline {
    agent {
        docker {
            image 'python:3.10'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        DOCKER_IMAGE = "${env.BUILD_NUMBER}"
        DOCKERHUB_REPO = "sudoerss/messaging-app"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-token')
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Pulling source code...'
                checkout scm
            }
        }
        stage('Setup Python Environment') {
            steps {
                sh '''
                cd messaging_app
                python3 -m venv venv
                . venv/bin/activate
                pip install -r requirements.txt
                '''
            }
        }
        stage('Run Tests') {
            steps {
                sh '''
                cd messaging_app
                . venv/bin/activate && pytest --verbose --junitxml=test-results.xml
                '''
            }
            post {
                always {
                    junit 'messaging_app/test-results.xml'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh '''
                    cd messaging_app
                    docker build -t ${DOCKERHUB_REPO}:${DOCKER_IMAGE} -t ${DOCKERHUB_REPO}:latest .
                    '''
                }
            }
        }
        stage('Push to DockerHub') {
            steps {
                script {
                    sh '''
                    export DOCKER_CONFIG=$(mktemp -d)
                    
                    echo 'Logging in to DockerHub...'
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    
                    echo 'Pushing Docker image...'
                    docker push ${DOCKERHUB_REPO}:${DOCKER_IMAGE}
                    docker push ${DOCKERHUB_REPO}:latest
                    
                    rm -rf $DOCKER_CONFIG
                    '''
                }
            }
        }
    }
    post {
        cleanup {
            sh '''
            docker rmi ${DOCKERHUB_REPO}:${DOCKER_IMAGE} || true
            docker rmi ${DOCKERHUB_REPO}:latest || true
            '''
        }
    }
}
